var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = LockPatternComplexity","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [LockPatternComplexity]","category":"page"},{"location":"api/#LockPatternComplexity.Bounds","page":"API","title":"LockPatternComplexity.Bounds","text":"Upper and lower bound for taxicab distance.\n\n\n\n\n\n","category":"type"},{"location":"api/#LockPatternComplexity.Grid","page":"API","title":"LockPatternComplexity.Grid","text":"Two-dimensional grid.\n\n\n\n\n\n","category":"type"},{"location":"api/#LockPatternComplexity.LineTypes-Tuple{Grid}","page":"API","title":"LockPatternComplexity.LineTypes","text":"Generate all x and y differences and their multiple k  that represent each line type in a grid.\n\n\n\n\n\n","category":"method"},{"location":"api/#LockPatternComplexity.Symmetries-Tuple{Grid}","page":"API","title":"LockPatternComplexity.Symmetries","text":"Generate all symmetrical permutations of lock pattern in a grid.\n\n\n\n\n\n","category":"method"},{"location":"api/#LockPatternComplexity.canvas-Tuple{}","page":"API","title":"LockPatternComplexity.canvas","text":"Plot \n\n\n\n\n\n","category":"method"},{"location":"api/#LockPatternComplexity.color_map-Tuple{Grid}","page":"API","title":"LockPatternComplexity.color_map","text":"Create unique color for all line types in the grid.\n\n\n\n\n\n","category":"method"},{"location":"api/#LockPatternComplexity.data-Tuple{Grid}","page":"API","title":"LockPatternComplexity.data","text":"Generate the input data for the MiniZinc model.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = LockPatternComplexity","category":"page"},{"location":"#Solving-the-Most-Complex-Lock-Patterns","page":"Home","title":"Solving the Most Complex Lock Patterns","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LockPatternComplexity.","category":"page"},{"location":"#Definition","page":"Home","title":"Definition","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"4×4 5×5\n(Image: ) (Image: )\ndistance=61 distance=119","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can state the problem of finding a maximum complexity lock pattern as follow. Over all lock patterns, excluding symmetrical patterns, that satisfy the maximum complexity condition, find the lock pattern that maximizes its taxicab distance.","category":"page"},{"location":"#Grids","page":"Home","title":"Grids","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Grid: 5×5\n(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"We define a grid of size nn where nℕ as set of points","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginaligned\nG = 1n1n\n = (x y)  xy1n\nendaligned","category":"page"},{"location":"","page":"Home","title":"Home","text":"The set of indices of a grid is","category":"page"},{"location":"","page":"Home","title":"Home","text":"I=12n^2","category":"page"},{"location":"","page":"Home","title":"Home","text":"We denote indidual points (x_i y_i) where iI","category":"page"},{"location":"","page":"Home","title":"Home","text":"example: Example\nWe define a 33 grid as G=(1 1) (1 2) (1 3) (2 1)  (3 3) with indices I=1 2 3 4 5 6 7 8 9","category":"page"},{"location":"#Lines-and-Line-Types","page":"Home","title":"Lines and Line Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Line types: y_ij0 Line types: y_ij0\n(Image: ) (Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"A line connects two points in the grid. We represent lines as a pair of indices (ij) where ijI We denote the difference between the endpoints of a line as (x_ij y_ij) where x_ij=x_j-x_i and y_ij=y_j-y_i ","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"We define a line type as a tuple (xy) such that x0 and x and y are coprime, that is, gcd(xy)=1 We can calculate the type for a line as","category":"page"},{"location":"","page":"Home","title":"Home","text":"t(ij)=begincases\n(x_ijd y_ijd)  x_ij0 \n(-x_ijd -y_ijd)  x_ij0\nendcases","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the greatest common divisor between the differences is","category":"page"},{"location":"","page":"Home","title":"Home","text":"d=gcd(x_ijy_ij)","category":"page"},{"location":"","page":"Home","title":"Home","text":"That is, we regard all lines with differences of form (cx_ijdcy_ijd) where cℤ  0 as the same type.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"The set of all possible lines","category":"page"},{"location":"","page":"Home","title":"Home","text":"L=(i j)  ijI ij","category":"page"},{"location":"","page":"Home","title":"Home","text":"All differences","category":"page"},{"location":"","page":"Home","title":"Home","text":"Δ=(x_ij y_ij) (ij)L","category":"page"},{"location":"","page":"Home","title":"Home","text":"All line types","category":"page"},{"location":"","page":"Home","title":"Home","text":"T=(x y)  (xy)Δ gcd(x y)=1 x0","category":"page"},{"location":"","page":"Home","title":"Home","text":"We consider (xy) and (-x -y) are same type, therefore, we add the constraint x0","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Lower bound for line types. How Many Rational Slopes","category":"page"},{"location":"","page":"Home","title":"Home","text":"T12(n-1)^2π^2","category":"page"},{"location":"#Patterns","page":"Home","title":"Patterns","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A pattern is a subset of lines","category":"page"},{"location":"","page":"Home","title":"Home","text":"L^=(i_1j_1)(i_2j_2)(i_m-1j_m-1)L","category":"page"},{"location":"","page":"Home","title":"Home","text":"such that L^=m-1 where m=n^2","category":"page"},{"location":"#Lock-Patterns","page":"Home","title":"Lock Patterns","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Example of a lock pattern Another example of a lock pattern\n(Image: ) (Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"A lock-pattern connects all points in the grid with lines such that we visit each point only once. That is, lines L^ form a lock pattern if the starting point for the next line is the end point of the previous line","category":"page"},{"location":"","page":"Home","title":"Home","text":"(i_2=j_1)(i_3=j_2)(i_m-1=j_m-2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"and all starting points are unique","category":"page"},{"location":"","page":"Home","title":"Home","text":"mathttalldifferent(i_1i_2i_m-1)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Therefore, we can represent a lock pattern as a permutation of indices I, that is","category":"page"},{"location":"","page":"Home","title":"Home","text":"p=(i_1i_2i_m)quad i_m=j_m-1","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can prove that TL^=n^2-1","category":"page"},{"location":"","page":"Home","title":"Home","text":"Plot T, n^2-1, and 12(n-1)^2π^2.","category":"page"},{"location":"#Maximum-Complexity-Condition","page":"Home","title":"Maximum Complexity Condition","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The set of lines types for the pattern L^ is","category":"page"},{"location":"","page":"Home","title":"Home","text":"T^=t(i j)  (ij)L^","category":"page"},{"location":"","page":"Home","title":"Home","text":"When there are more line types than lines in the pattern TL^ the pattern is a max complexity pattern if each line type is unique.","category":"page"},{"location":"","page":"Home","title":"Home","text":"T^=L^","category":"page"},{"location":"","page":"Home","title":"Home","text":"When T=L^ the lines types cover all line types.","category":"page"},{"location":"#Taxicab-Distance","page":"Home","title":"Taxicab Distance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The set of differences for the pattern L^ is","category":"page"},{"location":"","page":"Home","title":"Home","text":"Δ^=(x_ij y_ij) (ij)L^","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, we define the Taxicab distance as","category":"page"},{"location":"","page":"Home","title":"Home","text":"d=_(xy)Δ^ (x+y)","category":"page"},{"location":"#Symmetrical-Patterns","page":"Home","title":"Symmetrical Patterns","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Two patterns are symmetrical a permutation from one to the other preserves distances.","category":"page"}]
}
